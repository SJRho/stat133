knitr::opts_chunk$set(echo = TRUE, error = TRUE)
poly1 <- function(x) {
x^2 - 1
}
# set of points
x <- seq(-4, 4, length.out = 50)
y <- poly1(x)
# graph polynomial
plot(x, y, type = 'l', lwd = 3, col = "#FB7215", las = 1)
abline(h = 0, v = 0, col = '#888888aa', lwd = 1.5)
title(main = expression(paste(f(x), ' = ', x^2, (x - 1))))
poly2 <- function(x) {
x^3
}
y2 <- poly2(x)
plot(x, y2, type = 'l', lwd = 3, col = "#FB7215", las = 1)
abline(h = 0, v = 0, col = '#888888aa', lwd = 1.5)
title(main = expression(paste(f(x), ' = ', x^3)))
poly2b <- function(x) {
(x^2-1)*((x+3)^3)
}
y2b <- poly2b(x)
plot(x, y2b, type = 'l', lwd = 3, col = "#FB7215", las = 1)
abline(h = 0, v = 0, col = '#888888aa', lwd = 1.5)
title(main = expression(paste(f(x), ' = ', (x^2 - 1), (x + 3)^3)))
poly2c <- function(x) {
(x^2 - 1)*(x^2 - 9)
}
y2c <- poly2c(x)
plot(x, y2c, type = 'l', lwd = 3, col = "#FB7215", las = 1)
abline(h = 0, v = 0, col = '#888888aa', lwd = 1.5)
title(main = expression(paste(f(x), ' = ', (x^2 - 1), (x^2 - 9))))
# area of circle with radius 2
r <- 2
area <- pi * r^2
area
shiny::runApp()
circle_area()
circle_area(radius=3)
# Returns the area of a circle given the radius.
# Default radius is 1
circle_area() <- function(radius = 1) {
pi*(radius^2)
}
# Returns the area of a circle given the radius.
# Default radius is 1
circle_area <- function(radius = 1) {
pi*(radius^2)
}
circle_area()
circle_area(radius=3)
?stop()
circle_area <- function(radius = 1) {
if (radius < 0) {
stop("radius canot be negative")
}
pi*(radius^2)
}
circle_rea(radius = -2)
circle_area(radius = -2)
# Given the radius and height of a cylinder, returns the area.
# Default radius=1
# Default height=1
cylinder_area <- function(radius=1,height=1) {
2*pi*radius*height + 2*circle_area(radi)
}
cylinder_area()
cylinder_area(radius = 2, height = 3)
cylinder_area(radius = -2, height = 1)
cylinder_area(radius = 2, height = -1)
cylinder_area(radius = -2, height = -1)
# Given the radius and height of a cylinder, returns the area.
# Default radius=1
# Default height=1
cylinder_area <- function(radius=1,height=1) {
2*pi*radius*height + 2*circle_area(radius)
}
cylinder_area()
cylinder_area(radius = 2, height = 3)
cylinder_area(radius = -2, height = 1)
cylinder_area(radius = 2, height = -1)
cylinder_area(radius = -2, height = -1)
# Given the radius and height of a cylinder, returns the area.
# Default radius=1
# Default height=1
cylinder_area <- function(radius=1,height=1) {
if (height < 0) {
stop("height cannot be negative")
}
2*pi*radius*height + 2*circle_area(radius)
}
cylinder_area()
cylinder_area(radius = 2, height = 3)
cylinder_area(radius = -2, height = 1)
cylinder_area(radius = 2, height = -1)
cylinder_area(radius = -2, height = -1)
# 4 is exactly divisible by 2
4 %% 2
# 5 is not exactly divisible by 2
5 %% 2
is_even <- function(n) {
if (is.na(n)) {
NA
} else if (n %% 2 == 0) {
TRUE
} else {
FALSE
}
}
is_even(10)
is_even(33)
is_even('a')
?is
numeric('a)')
numeric('a')
is.numeric("a")
is_even <- function(n) {
if (is.numeric(n)) {
NA
} else if (n %% 2 == 0) {
TRUE
} else {
FALSE
}
}
is_even(10)
is_even(33)
is_even('a')
is_even <- function(n) {
if (!is.numeric(n)) {
NA
} else if (n %% 2 == 0) {
TRUE
} else {
FALSE
}
}
is_even(10)
is_even(33)
is_even('a')
is_odd <- function(n) {
!is_even(n)
}
is_odd(1)
is_odd(4)
is_odd('a')
?squish
squish <- function(n) {
if (n < 0) {
0
} else if (n > 100) {
100
} else {
n
}
}
squish(-5)
squish(180)
squish(50)
squish(0)
squish(100)
